apply plugin: 'maven-publish'

Properties properties = new Properties()
properties.load(project.file('./upload.properties').newDataInputStream())

def DEFAULT_POM_NAME='gesture'
def DEFAULT_POM_VERSION='1.0.0'  //har包版本信息
def DEFAULT_POM_ARTIFACT_ID="gestureview"  //har包ID
def DEFAULT_POM_GROUP_ID='com.wx.harmony'  //项目组ID
def DEFAULT_POM_PACKAGING='har'  //包类型，固定为har
def DEFAULT_POM_DESCRIPTION='gesture view'
def MAVEN_USERNAME=properties.getProperty('MAVEN_USERNAME')  //远程Maven仓的用户名
def MAVEN_PASSWORD=properties.getProperty('MAVEN_PASSWORD')  //远程Maven仓的密码
def LOCAL_MAVEN_REPOSITORY_URL=properties.getProperty('LOCAL_MAVEN_REPOSITORY_URL')//本地Maven仓地址
def REMOTE_MAVEN_REPOSITORY_URL=properties.getProperty('REMOTE_MAVEN_REPOSITORY_URL')//远程Maven仓地址

afterEvaluate { project ->
    DEFAULT_POM_ARTIFACT_ID = DEFAULT_POM_ARTIFACT_ID
    publishing {
        publications {
            maven(MavenPublication) {
                from components.release  //指定发布的har包类型为debug或release
                group = DEFAULT_POM_GROUP_ID
                artifactId = DEFAULT_POM_ARTIFACT_ID
                version = DEFAULT_POM_VERSION
                pom {
                    name = DEFAULT_POM_NAME
                    description = DEFAULT_POM_DESCRIPTION
                    packaging = DEFAULT_POM_PACKAGING
                }
            }
        }
        repositories {
            maven {
                url = LOCAL_MAVEN_REPOSITORY_URL  //发布到本地Maven仓
                //发布到远程Maven仓的地址以及Maven仓的帐号和密码
                /*url = REMOTE_MAVEN_REPOSITORY_URL
                 credentials {
                    username MAVEN_USERNAME
                    password MAVEN_PASSWORD
                 }
                */
            }
        }
    }
}